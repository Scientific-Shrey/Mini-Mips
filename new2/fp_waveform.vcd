$date
	Wed Apr 16 13:06:21 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module fp_test_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module uut $end
$var wire 1 # branch_taken $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 $ zero $end
$var wire 5 % write_reg [4:0] $end
$var wire 32 & sign_ext_imm [31:0] $end
$var wire 1 ' reg_write $end
$var wire 1 ( reg_dst $end
$var wire 32 ) read_data2 [31:0] $end
$var wire 32 * read_data1 [31:0] $end
$var wire 32 + pc_out [31:0] $end
$var wire 32 , pc_in [31:0] $end
$var wire 1 - move_fp_to_cpu $end
$var wire 1 . move_cpu_to_fp $end
$var wire 1 / mem_write $end
$var wire 1 0 mem_to_reg $end
$var wire 1 1 mem_read $end
$var wire 32 2 mem_data [31:0] $end
$var wire 1 3 lo_write $end
$var wire 32 4 lo [31:0] $end
$var wire 1 5 jump $end
$var wire 32 6 instruction [31:0] $end
$var wire 1 7 hi_write $end
$var wire 32 8 hi [31:0] $end
$var wire 1 9 fp_reg_write $end
$var wire 1 : fp_reg_read $end
$var wire 32 ; fp_read_data2 [31:0] $end
$var wire 32 < fp_read_data1 [31:0] $end
$var wire 1 = fp_operation $end
$var wire 1 > fp_compare_result $end
$var wire 1 ? branch $end
$var wire 1 @ bne_condition $end
$var wire 1 A blez_condition $end
$var wire 1 B bgtz_condition $end
$var wire 1 C beq_condition $end
$var wire 1 D alu_src $end
$var wire 32 E alu_result [31:0] $end
$var wire 2 F alu_op [1:0] $end
$var wire 32 G alu_lo [31:0] $end
$var wire 32 H alu_hi [31:0] $end
$var wire 4 I alu_control [3:0] $end
$scope module alu_ctrl_inst $end
$var wire 6 J funct [5:0] $end
$var wire 1 = fp_operation $end
$var wire 2 K alu_op [1:0] $end
$var reg 4 L alu_control [3:0] $end
$upscope $end
$scope module alu_inst $end
$var wire 4 M alu_control [3:0] $end
$var wire 32 N input2 [31:0] $end
$var wire 5 O shamt [4:0] $end
$var wire 1 $ zero $end
$var wire 32 P lo_in [31:0] $end
$var wire 32 Q input1 [31:0] $end
$var wire 32 R hi_in [31:0] $end
$var reg 8 S exp1 [7:0] $end
$var reg 8 T exp2 [7:0] $end
$var reg 8 U exp_diff [7:0] $end
$var reg 8 V exp_result [7:0] $end
$var reg 1 > fp_compare_result $end
$var reg 32 W hi_out [31:0] $end
$var reg 32 X lo_out [31:0] $end
$var reg 24 Y mant1 [23:0] $end
$var reg 24 Z mant2 [23:0] $end
$var reg 48 [ mant_product [47:0] $end
$var reg 25 \ mant_sum [24:0] $end
$var reg 32 ] result [31:0] $end
$var reg 1 ^ sign1 $end
$var reg 1 _ sign2 $end
$var reg 1 ` sign_result $end
$upscope $end
$scope module cu_inst $end
$var wire 6 a funct [5:0] $end
$var wire 6 b opcode [5:0] $end
$var parameter 6 c ADDI $end
$var parameter 6 d ADDIU $end
$var parameter 6 e ANDI $end
$var parameter 6 f BEQ $end
$var parameter 6 g BGTZ $end
$var parameter 6 h BLEZ $end
$var parameter 6 i BNE $end
$var parameter 6 j CP1 $end
$var parameter 6 k J $end
$var parameter 6 l LUI $end
$var parameter 6 m LW $end
$var parameter 6 n LWC1 $end
$var parameter 6 o ORI $end
$var parameter 6 p R_TYPE $end
$var parameter 6 q SLTIU $end
$var parameter 6 r SW $end
$var parameter 6 s SWC1 $end
$var parameter 6 t XORI $end
$var reg 2 u alu_op [1:0] $end
$var reg 1 D alu_src $end
$var reg 1 ? branch $end
$var reg 1 = fp_operation $end
$var reg 1 : fp_reg_read $end
$var reg 1 9 fp_reg_write $end
$var reg 1 7 hi_write $end
$var reg 1 5 jump $end
$var reg 1 3 lo_write $end
$var reg 1 1 mem_read $end
$var reg 1 0 mem_to_reg $end
$var reg 1 / mem_write $end
$var reg 1 . move_cpu_to_fp $end
$var reg 1 - move_fp_to_cpu $end
$var reg 1 ( reg_dst $end
$var reg 1 ' reg_write $end
$upscope $end
$scope module dm_inst $end
$var wire 32 v address [31:0] $end
$var wire 1 ! clk $end
$var wire 1 1 mem_read $end
$var wire 1 / mem_write $end
$var wire 32 w write_data [31:0] $end
$var wire 32 x read_data [31:0] $end
$var integer 32 y i [31:0] $end
$upscope $end
$scope module fp_rf_inst $end
$var wire 1 ! clk $end
$var wire 1 9 fp_reg_write $end
$var wire 32 z read_data1 [31:0] $end
$var wire 32 { read_data2 [31:0] $end
$var wire 5 | read_reg1 [4:0] $end
$var wire 5 } read_reg2 [4:0] $end
$var wire 32 ~ write_data [31:0] $end
$var wire 5 !" write_reg [4:0] $end
$var integer 32 "" i [31:0] $end
$upscope $end
$scope module im_inst $end
$var wire 32 #" instruction [31:0] $end
$var wire 32 $" address [31:0] $end
$scope begin mem_init $end
$var integer 32 %" j [31:0] $end
$upscope $end
$upscope $end
$scope module pc_inst $end
$var wire 1 ! clk $end
$var wire 32 &" pc_in [31:0] $end
$var wire 1 " reset $end
$var reg 32 '" pc_out [31:0] $end
$upscope $end
$scope module rf_inst $end
$var wire 1 ! clk $end
$var wire 32 (" hi_in [31:0] $end
$var wire 1 7 hi_write $end
$var wire 32 )" lo_in [31:0] $end
$var wire 1 3 lo_write $end
$var wire 5 *" read_reg1 [4:0] $end
$var wire 5 +" read_reg2 [4:0] $end
$var wire 1 ' reg_write $end
$var wire 32 ," write_data [31:0] $end
$var wire 5 -" write_reg [4:0] $end
$var wire 32 ." read_data2 [31:0] $end
$var wire 32 /" read_data1 [31:0] $end
$var reg 32 0" hi [31:0] $end
$var reg 32 1" lo [31:0] $end
$var integer 32 2" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1110 t
b111001 s
b101011 r
b1011 q
b0 p
b1101 o
b110001 n
b100011 m
b1111 l
b10 k
b10001 j
b101 i
b110 h
b111 g
b100 f
b1100 e
b1001 d
b1000 c
$end
#0
$dumpvars
b100000 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b100 &"
b1100101 %"
b0 $"
b11000100000000000000000000000000 #"
b100000 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b1000000000 y
b111111100000000000000000000000 x
b0 w
b0 v
b0 u
b110001 b
b0 a
x`
x_
x^
b0 ]
bx \
bx [
bx Z
bx Y
b0 X
b0 W
bx V
bx U
bx T
bx S
b0 R
b0 Q
b0 P
b0 O
b0 N
b10 M
b10 L
b0 K
b0 J
b10 I
b0 H
b0 G
b0 F
b0 E
1D
1C
0B
1A
0@
0?
x>
0=
b0 <
b0 ;
0:
19
b0 8
07
b11000100000000000000000000000000 6
05
b0 4
03
b111111100000000000000000000000 2
11
00
0/
0.
0-
b100 ,
b0 +
b0 *
b0 )
0(
0'
b0 &
b0 %
1$
0#
1"
0!
$end
#5000
1!
#10000
0!
#15000
b1000000000000000000000000000000 2
b1000000000000000000000000000000 x
b100 ~
b100 ,"
0$
b100 E
b100 ]
b100 v
b1 %
b1 -"
b100 N
19
11
1D
b100 &
b100 J
b1 }
b1 +"
b100 a
b1000 ,
b1000 &"
b11000100000000010000000000000100 6
b11000100000000010000000000000100 #"
b100 +
b100 $"
b100 '"
1!
0"
#20000
0!
#25000
b1000000010000000000000000000000 2
b1000000010000000000000000000000 x
b1000 ~
b1000 ,"
b1000 E
b1000 ]
b1000 v
b10 %
b10 -"
b1000 N
19
11
1D
b1000 &
b1000 J
b10 }
b10 +"
b1000 a
b1100 ,
b1100 &"
b11000100000000100000000000001000 6
b11000100000000100000000000001000 #"
b100 <
b100 z
b1000 +
b1000 $"
b1000 '"
1!
#30000
0!
#35000
b0 ~
1$
b0 E
b0 ]
b0 v
bz 2
bz x
b1 %
b1 -"
b0 N
1-
1'
09
01
0D
b11000000 &
b11 O
b0 J
b11 !"
b1 }
b1 +"
b10000 *"
b0 a
b10001 b
b10000 ,
b10000 &"
b1000110000000010000000011000000 6
b1000110000000010000000011000000 #"
b1000 <
b1000 z
b1100 +
b1100 $"
b1100 '"
1!
#40000
0!
#45000
b0 w
b0 N
b0 %
b0 -"
b100000000000000000000000 Z
b100000000000000000000000 Y
b0 T
b0 S
0_
0^
b1110 I
b1110 L
b1110 M
b0 ,"
19
1=
0-
0'
0@
1C
b0 )
b0 ."
b1000100000001 &
b100 O
b1 J
b100 !"
b1000 ;
b1000 {
b0 }
b0 <
b0 z
b10 |
b0 +"
b1 a
b10100 ,
b10100 &"
b1000110000000000001000100000001 6
b1000110000000000001000100000001 #"
b10000 +
b10000 $"
b10000 '"
1!
#50000
0!
#55000
b11 %
b11 -"
b0 I
b0 L
b0 M
1=
19
b110010 &
b0 O
b110010 J
b0 !"
b0 ;
b0 {
b11 }
b1000 <
b1000 z
b0 |
b11 +"
b110010 a
b11000 ,
b11000 &"
b1000110000000110000000000110010 6
b1000110000000110000000000110010 #"
b10100 +
b10100 $"
b10100 '"
1!
#60000
0!
#65000
b1000 w
b1000 N
1@
0C
b1000 )
b1000 ."
b1 %
b1 -"
b10110010 &
b10 O
b10 !"
b1 }
b1 +"
b11100 ,
b11100 &"
b1000110000000010000000010110010 6
b1000110000000010000000010110010 #"
b0 <
b0 z
b11000 +
b11000 $"
b11000 '"
1!
#70000
0!
#75000
b0 w
b0 N
0@
1C
b0 )
b0 ."
b0 %
b0 -"
b1000 I
b1000 L
b1000 M
b10 F
b10 K
b10 u
1'
1(
0=
09
b0 &
b0 O
b0 J
b0 !"
b0 }
b0 +"
b0 *"
b0 a
b0 b
b100000 ,
b100000 &"
b0 6
b0 #"
b11100 +
b11100 $"
b11100 '"
1!
#80000
0!
#85000
b100100 ,
b100100 &"
b100000 +
b100000 $"
b100000 '"
1!
#90000
0!
#95000
b101000 ,
b101000 &"
b100100 +
b100100 $"
b100100 '"
1!
#100000
0!
#105000
b101100 ,
b101100 &"
b101000 +
b101000 $"
b101000 '"
1!
#110000
0!
#115000
b110000 ,
b110000 &"
b101100 +
b101100 $"
b101100 '"
1!
#120000
0!
#125000
b110100 ,
b110100 &"
b110000 +
b110000 $"
b110000 '"
1!
#130000
0!
#135000
b111000 ,
b111000 &"
b110100 +
b110100 $"
b110100 '"
1!
#140000
0!
#145000
b111100 ,
b111100 &"
b111000 +
b111000 $"
b111000 '"
1!
#150000
0!
#155000
b1000000 ,
b1000000 &"
b111100 +
b111100 $"
b111100 '"
1!
#160000
0!
#165000
b1000100 ,
b1000100 &"
b1000000 +
b1000000 $"
b1000000 '"
1!
#170000
0!
#175000
b1001000 ,
b1001000 &"
b1000100 +
b1000100 $"
b1000100 '"
1!
#180000
0!
#185000
b1001100 ,
b1001100 &"
b1001000 +
b1001000 $"
b1001000 '"
1!
#190000
0!
#195000
b1010000 ,
b1010000 &"
b1001100 +
b1001100 $"
b1001100 '"
1!
#200000
0!
#205000
b1010100 ,
b1010100 &"
b1010000 +
b1010000 $"
b1010000 '"
1!
#210000
0!
#215000
b1011000 ,
b1011000 &"
b1010100 +
b1010100 $"
b1010100 '"
1!
#220000
0!
#225000
b1011100 ,
b1011100 &"
b1011000 +
b1011000 $"
b1011000 '"
1!
#230000
0!
#235000
b1100000 ,
b1100000 &"
b1011100 +
b1011100 $"
b1011100 '"
1!
#240000
0!
#245000
b1100100 ,
b1100100 &"
b1100000 +
b1100000 $"
b1100000 '"
1!
#250000
0!
#255000
b1101000 ,
b1101000 &"
b1100100 +
b1100100 $"
b1100100 '"
1!
#260000
0!
#265000
b1101100 ,
b1101100 &"
b1101000 +
b1101000 $"
b1101000 '"
1!
#270000
0!
#275000
b1110000 ,
b1110000 &"
b1101100 +
b1101100 $"
b1101100 '"
1!
#280000
0!
#285000
b1110100 ,
b1110100 &"
b1110000 +
b1110000 $"
b1110000 '"
1!
#290000
0!
#295000
b1111000 ,
b1111000 &"
b1110100 +
b1110100 $"
b1110100 '"
1!
#300000
0!
#305000
b1111100 ,
b1111100 &"
b1111000 +
b1111000 $"
b1111000 '"
1!
#310000
0!
#315000
b10000000 ,
b10000000 &"
b1111100 +
b1111100 $"
b1111100 '"
1!
#320000
0!
#325000
b10000100 ,
b10000100 &"
b10000000 +
b10000000 $"
b10000000 '"
1!
#330000
0!
#335000
b10001000 ,
b10001000 &"
b10000100 +
b10000100 $"
b10000100 '"
1!
#340000
0!
#345000
b10001100 ,
b10001100 &"
b10001000 +
b10001000 $"
b10001000 '"
1!
#350000
0!
#355000
b10010000 ,
b10010000 &"
b10001100 +
b10001100 $"
b10001100 '"
1!
#360000
0!
#365000
b10010100 ,
b10010100 &"
b10010000 +
b10010000 $"
b10010000 '"
1!
#370000
0!
#375000
b10011000 ,
b10011000 &"
b10010100 +
b10010100 $"
b10010100 '"
1!
#380000
0!
#385000
b10011100 ,
b10011100 &"
b10011000 +
b10011000 $"
b10011000 '"
1!
#390000
0!
#395000
b10100000 ,
b10100000 &"
b10011100 +
b10011100 $"
b10011100 '"
1!
#400000
0!
#405000
b10100100 ,
b10100100 &"
b10100000 +
b10100000 $"
b10100000 '"
1!
#410000
0!
#415000
b10101000 ,
b10101000 &"
b10100100 +
b10100100 $"
b10100100 '"
1!
#420000
0!
#425000
b10101100 ,
b10101100 &"
b10101000 +
b10101000 $"
b10101000 '"
1!
#430000
0!
#435000
b10110000 ,
b10110000 &"
b10101100 +
b10101100 $"
b10101100 '"
1!
#440000
0!
#445000
b10110100 ,
b10110100 &"
b10110000 +
b10110000 $"
b10110000 '"
1!
#450000
0!
#455000
b10111000 ,
b10111000 &"
b10110100 +
b10110100 $"
b10110100 '"
1!
#460000
0!
#465000
b10111100 ,
b10111100 &"
b10111000 +
b10111000 $"
b10111000 '"
1!
#470000
0!
#475000
b11000000 ,
b11000000 &"
b10111100 +
b10111100 $"
b10111100 '"
1!
#480000
0!
#485000
b11000100 ,
b11000100 &"
b11000000 +
b11000000 $"
b11000000 '"
1!
#490000
0!
#495000
b11001000 ,
b11001000 &"
b11000100 +
b11000100 $"
b11000100 '"
1!
#500000
0!
#505000
b11001100 ,
b11001100 &"
b11001000 +
b11001000 $"
b11001000 '"
1!
#510000
0!
